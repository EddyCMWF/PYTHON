import numpy as np
import os

package_dir=os.path.dirname(os.path.realpath(__file__))

def cmip5_runs():

    return    [['BCC','bcc-csm1-1'],
              ['BCC','bcc-csm1-1-m'],
              ['BNU','BNU-ESM'],
              ['CCCma','CanESM2'],
              ['CMCC','CMCC-CMS'],
              ['CNRM-CERFACS','CNRM-CM5'],
              ['CSIRO-BOM','ACCESS1-0'],
              ['CSIRO-BOM','ACCESS1-3'],
              ['CSIRO-QCCCE','CSIRO-Mk3-6-0'],
              ['INM','inmcm4'],
              ['IPSL','IPSL-CM5A-LR'],
              ['IPSL','IPSL-CM5A-MR'],
              ['IPSL','IPSL-CM5B-LR'],
              ['MIROC','MIROC5'],
              ['MIROC','MIROC-ESM'],
              ['MIROC','MIROC-ESM-CHEM'],
              ['MOHC','HadGEM2-CC'],
              ['MOHC','HadGEM2-ES'],
              ['MPI-M','MPI-ESM-LR'],
              ['MPI-M','MPI-ESM-MR'],
              ['MRI','MRI-CGCM3'],
              ['NASA-GISS','GISS-E2-H'],
              ['NASA-GISS','GISS-E2-H-CC'],
              ['NASA-GISS','GISS-E2-R'],
              ['NASA-GISS','GISS-E2-R-CC'],
              ['NCAR','CCSM4'],
              ['NCC','NorESM1-M'],
              ['NCC','NorESM1-ME'],
              ['NOAA-GFDL','GFDL-CM3'],
              ['NOAA-GFDL','GFDL-ESM2G'],
              ['NOAA-GFDL','GFDL-ESM2M'],
              ['NSF-DOE-NCAR','CESM1-BGC'],
              ['NSF-DOE-NCAR','CESM1-CAM5'],
              ['NSF-DOE-NCAR','CESM1-WACCM']]


        
def read_imogen_varfile(cmip5_runs,filename):
    n_cmip5=len(cmip5_runs)
    outdata=np.zeros(n_cmip5)
    infile=open(filename,'r')
    indata={}
    for line in infile.readlines():
        split=line.split()
        centre=split[1]
        model=split[2]
        data=split[0]
        indata[centre+model]=data

    for i_gcm in range(n_cmip5):
        outdata[i_gcm]=indata[cmip5_runs[i_gcm][0]+cmip5_runs[i_gcm][1]]

    return outdata

#def kappa(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/kappa.dat'):
def kappa(cmip5_runs,filename=package_dir+'/kappa.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

#def lambda_o(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/lambda_o.dat'):
def lambda_o(cmip5_runs,filename=package_dir+'/lambda_o.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

#def lambda_l(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/lambda_l.dat'):
def lambda_l(cmip5_runs,filename=package_dir+'/lambda_l.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

#def ocean_frac(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/ocean_frac.dat'):
def ocean_frac(cmip5_runs,filename=package_dir+'/ocean_frac.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

#def nu(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/nu.dat'):
def nu(cmip5_runs,filename=package_dir+'/nu.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

# Collate all imogen ebm params into dictionary from default location
def imogen_ebm_params(cmip5_runs):
    ebm_params = {'kappa':      kappa(cmip5_runs),
                  'lambda_o':   lambda_o(cmip5_runs),
                  'lambda_l':   lambda_l(cmip5_runs),
                  'ocean_frac': ocean_frac(cmip5_runs),
                  'nu':         nu(cmip5_runs)
                  }

#def nu(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/nu.dat'):
def fch4_k(cmip5_runs,filename=package_dir+'/fch4_k_cs.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

#def nu(cmip5_runs,filename='/users/global/chg/imogen/build/imogen_vals/nu.dat'):
def fch4_q10(cmip5_runs,filename=package_dir+'/fch4_q10_cs.dat'):
    return read_imogen_varfile(cmip5_runs,filename)

def SCENARIOs():
    """
        Return a List containing SCENARIO tag names
    """
    SCENARIOs = [  '2deg', '1p81p5deg', '1p5deg' ]
    return SCENARIOs

def SCENARIO_LABELs():
    """
        Return a List containing SCENARIO tag names
    """
    SCENARIO_LABELs = [  '2$^o$C', '1.5$^o$C (Overshoot)', '1.5$^o$C' ]
    return SCENARIO_LABELs

def SCENARIO_COLOURS():
    """
        Return a List containing default SCENARIO Colours
    """
    SCENARIO_COLOURS = [  '#ED6495','#EDBC64','#6495ED' ]
    return SCENARIO_COLOURS

def SCENARIO_COLOURS_light():
    """
        Return a List containing light default SCENARIO Colours for background lines
    """
    SCENARIO_COLOURS = [  '#F9CBDB','#F9E8CB','#CBDBF9' ]
    return SCENARIO_COLOURS

def TILE_full_names():
    """
        Return a List of full names for the 17 tiles
    """
    TILEs = [ 'Deciduous-Broadleaf','Tropical-Broadleaf','Temperate-Broadleaf',
              'Deciduous-Needleleaf','Evergreen-Needleleaf',
              'C3-grass','C3-crop','C3-pasture',
              'C4-grass','C4-crop','C4-pasture',
              'Deciduous-shrub','Evergreen-shrub',
              'Urban','Inland-Water','Bare-Soil','Land-Ice']
    return TILEs

def TILE_short_names():
    """
        Return a List of short names for the 17 tiles
    """
    TILEs = [ 'Dec-BL','Trop-BL','Temp-BL',
              'Dec-NL','Ever-NL',
              'C3-grass','C3-crop','C3-past',
              'C4-grass','C4-crop','C4-past',
              'Dec-shrub','Ever-shrub',
              'Urban','Lake','Soil','Ice']
    return TILEs

def TILE_colours():
    """
        Return a List colours for the 17 tile classes 
    """
    TILE_colours = ['#5ccc06','#51b305','#469a04',
                   '#166e2d','#115925',
                   '#d6e309','#e3df83','#a8ffeb',
                   '#abb507','#b5b268','#86ccbc',
                   '#9a6d02','#cc9103',
                   '#ff0101','#015cf6','#4e3801','#dfdfdf']
    return TILE_colours

def GCMs():
    """
        Return a List containing GCM tag names
    """
    GCMs = [
            'CEN_BCC_MOD_bcc-csm1-1',
            'CEN_BCC_MOD_bcc-csm1-1-m',
            'CEN_BNU_MOD_BNU-ESM',
            'CEN_CCCma_MOD_CanESM2',
            'CEN_CMCC_MOD_CMCC-CMS',
            'CEN_CNRM-CERFACS_MOD_CNRM-CM5',
            'CEN_CSIRO-BOM_MOD_ACCESS1-0',
            'CEN_CSIRO-BOM_MOD_ACCESS1-3',
            'CEN_CSIRO-QCCCE_MOD_CSIRO-Mk3-6-0',
            'CEN_INM_MOD_inmcm4',
            'CEN_IPSL_MOD_IPSL-CM5A-LR',
            'CEN_IPSL_MOD_IPSL-CM5A-MR',
            'CEN_IPSL_MOD_IPSL-CM5B-LR',
            'CEN_MIROC_MOD_MIROC5',
            'CEN_MIROC_MOD_MIROC-ESM',
            'CEN_MIROC_MOD_MIROC-ESM-CHEM',
            'CEN_MOHC_MOD_HadGEM2-CC',
            'CEN_MOHC_MOD_HadGEM2-ES',
            'CEN_MPI-M_MOD_MPI-ESM-LR',
            'CEN_MPI-M_MOD_MPI-ESM-MR',
            'CEN_MRI_MOD_MRI-CGCM3',
            'CEN_NASA-GISS_MOD_GISS-E2-H',
            'CEN_NASA-GISS_MOD_GISS-E2-H-CC',
            'CEN_NASA-GISS_MOD_GISS-E2-R',
            'CEN_NASA-GISS_MOD_GISS-E2-R-CC',
            'CEN_NCAR_MOD_CCSM4',
            'CEN_NCC_MOD_NorESM1-M',
            'CEN_NCC_MOD_NorESM1-ME',
            'CEN_NOAA-GFDL_MOD_GFDL-CM3',
            'CEN_NOAA-GFDL_MOD_GFDL-ESM2G',
            'CEN_NOAA-GFDL_MOD_GFDL-ESM2M',
            'CEN_NSF-DOE-NCAR_MOD_CESM1-BGC',
            'CEN_NSF-DOE-NCAR_MOD_CESM1-CAM5',
            'CEN_NSF-DOE-NCAR_MOD_CESM1-WACCM',
            ]

    return GCMs



def GCM_INFO():
    """
        Return a Dictionary containing relevant info for GCMs
    """
    GCMs = {
            'CEN_BCC_MOD_bcc-csm1-1':{},
            'CEN_BCC_MOD_bcc-csm1-1-m':{},
            'CEN_BNU_MOD_BNU-ESM':{},
            'CEN_CCCma_MOD_CanESM2':{},
            'CEN_CMCC_MOD_CMCC-CMS':{},
            'CEN_CNRM-CERFACS_MOD_CNRM-CM5':{},
            'CEN_CSIRO-BOM_MOD_ACCESS1-0':{},
            'CEN_CSIRO-BOM_MOD_ACCESS1-3':{},
            'CEN_CSIRO-QCCCE_MOD_CSIRO-Mk3-6-0':{},
            'CEN_INM_MOD_inmcm4':{},
            'CEN_IPSL_MOD_IPSL-CM5A-LR':{},
            'CEN_IPSL_MOD_IPSL-CM5A-MR':{},
            'CEN_IPSL_MOD_IPSL-CM5B-LR':{},
            'CEN_MIROC_MOD_MIROC5':{},
            'CEN_MIROC_MOD_MIROC-ESM':{},
            'CEN_MIROC_MOD_MIROC-ESM-CHEM':{},
            'CEN_MOHC_MOD_HadGEM2-CC':{},
            'CEN_MOHC_MOD_HadGEM2-ES':{},
            'CEN_MPI-M_MOD_MPI-ESM-LR':{},
            'CEN_MPI-M_MOD_MPI-ESM-MR':{},
            'CEN_MRI_MOD_MRI-CGCM3':{},
            'CEN_NASA-GISS_MOD_GISS-E2-H':{},
            'CEN_NASA-GISS_MOD_GISS-E2-H-CC':{},
            'CEN_NASA-GISS_MOD_GISS-E2-R':{},
            'CEN_NASA-GISS_MOD_GISS-E2-R-CC':{},
            'CEN_NCAR_MOD_CCSM4':{},
            'CEN_NCC_MOD_NorESM1-M':{},
            'CEN_NCC_MOD_NorESM1-ME':{},
            'CEN_NOAA-GFDL_MOD_GFDL-CM3':{},
            'CEN_NOAA-GFDL_MOD_GFDL-ESM2G':{},
            'CEN_NOAA-GFDL_MOD_GFDL-ESM2M':{},
            'CEN_NSF-DOE-NCAR_MOD_CESM1-BGC':{},
            'CEN_NSF-DOE-NCAR_MOD_CESM1-CAM5':{},
            'CEN_NSF-DOE-NCAR_MOD_CESM1-WACCM':{},
            }

    return GCM_info

def read_scenario_file(filename,return_years=False,ndata=1):
    inf=open(filename,'r')
    lines=inf.readlines()
    inf.close()

    year=[]
    data=[ [] for i in range(ndata) ]

    for line in lines:
        split=line.replace('\n','').split()
        year.append(int(split[0]))
        for i in range(ndata):
            data[i].append(float(split[i+1]))

    year=np.array(year)
    for i in range(ndata):
        data[i]=np.array(data[i])
    
    if return_years:
        return data, year
    else:
        return data

def TRANSCOM_region_names():
    region_names = [ 'North American Boreal', 'North American Temperate', 'South American Tropical',
                     'South American Temperate', 'Northern Africa', 'Southern Africa',
                     'Eurasia Boreal', 'Eurasia Temperate', 'Tropical Asia', 'Australia', 
                     'Europe', 'Arctic', 'Global' ]
    return region_names

def TRANSCOM_region_index():
    region_index = [ 1,2,3,4,5,6,7,8,9,10,11,12 ]
    return region_index

def TRANSCOM_region_shortnames():
    region_shortnames = [ 'NAmBo', 'NAmTe', 'SAmTr', 'SAmTe', 'NAfr', 'SAfr', 
                          'EuBo', 'EuTe', 'TrAs', 'Aus', 'Eu', 'Ar', 'GLOB' ]
    return region_shortnames
    
def TRANSCOM_region_AnthroFrac():
    region_anthrofracs = [ 0.0139+0.0695, 0.0228, 0.0804, 0.0184, 0.0626, 0.0271, 
                          0.0659, 0.2320+0.1313+0.0847, 0.101, 0.0187, 0.0718, 0., 1. ]
    return region_anthrofracs

def TRANSCOM_region_dict():
    dictionary = { 'Name': TRANSCOM_region_names(),
                   'ShortName': TRANSCOM_region_shortnames(),
                   'Index': TRANSCOM_region_index(),
                   'AnthroFraction':TRANSCOM_region_AnthroFrac(),
                   'Nregions':len(TRANSCOM_region_names()),
                   'NCvarname':'transcom',
                   }
    return dictionary

def IMAGE_region_names():
    region_names = [ 
                     'Canada', 'USA', 'Mexico', 'Central America', 'Brazil',
                     'Rest of South America', 'Northern Africa', 'Western Africa',
                     'Eastern Africa', 'South Africa', 
                     'Western Europe', 'Central Europe', 'Turkey', 'Ukraine Region',
                     'Central Asia', 'Russia region', 'Middle East', 'India',
                     'Korea region', 'China region', 'Southeastern Asia',
                     'Indonesia region', 'Japan', 'Oceania',
                     'Rest of South Asia', 'Rest of Southern Africa',
                     'International Transportation', 'Global' 
                     ]
    return region_names

def IMAGE_region_index():
    region_index = [ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ]
    return region_index

def IMAGE_region_shortnames():
    region_shortnames = [ 
                     'CAN', 'USA', 'MEX', 'RCAM', 'BRA',   
                     'RSAM', 'NAF', 'WAF',
                     'EAF', 'SAF', 
                     'WEU', 'CEU', 'TUR', 'UKR', 
                     'STAN', 'RUS', 'ME', 'INDIA',
                     'KOR', 'CHN', 'SEAS',
                     'INDO', 'JAP', 'OCE',
                     'RSAS', 'RSAF', 
                     'TRANS', 'GLOB' 
                     ]

    return region_shortnames

def IMAGE_region_AnthroFrac():
    region_anthrofracs = [ 
               0.0154269088, 0.0806721974, 0.0096452173, 0.0048973332, 0.0359868136, 
               0.04646875  , 0.0109057085, 0.0386642395,
               0.0220839918, 0.0651877538,
               0.0459785395, 0.0221875835, 0.0080983004, 0.0116433098,
               0.0329286633, 0.0545656012, 0.0538320869, 0.1431148871,
               0.0041704143, 0.1464276324, 0.0442722071,
               0.0238045358, 0.0037078636, 0.0399355412,
               0.0266168129, 0.0087771877,
               0.0, 1.0
                        ]
    return region_anthrofracs

def IMAGE_region_WaterConsumption_min():
    region_water_consumption = { 
'2005': [ 4.23, 23.49, 6.37, 2.62, 15.19, 15.54, 8.85, 2.88, 1.4, 1.67, 36.23, 5.16, 2.91, 5.31, 6.23, 18.83, 3.28, 35.15, 2.75, 32.06, 5.65, 10.02, 9.14, 2.27, 8.94, 2.31, 0, 268.49],
'2010': [ 4.09, 23.56, 6.94, 2.86, 16.96, 15.95, 9.6, 3.32, 2.1, 1.9, 34.47, 5.45, 3.3, 5.82, 7.67, 19.57, 3.73, 45.81, 2.93, 44.49, 6.69, 11.7, 8.33, 2.3, 11.03, 2.82, 0, 303.37],
'2015': [ 4.32, 23.52, 7.17, 3.19, 18.67, 17.93, 9.52, 4.15, 2.57, 1.97, 33.90, 5.26, 3.72, 5.76, 9.16, 19.22, 4.24, 57.72, 3.10, 57.10, 8.53, 13.76, 8.12, 2.35, 13.08, 3.32, 0.00, 341.38],
'2020': [4.29, 23.53, 7.62, 3.40, 22.08, 20.73, 10.71, 5.86, 3.46, 2.12, 33.24, 5.47, 4.13, 6.13, 10.52, 19.58, 4.57, 71.58, 3.16, 66.31, 10.07, 16.64, 7.90, 2.39, 16.15, 4.27, 0.00, 385.91],
'2025': [ 4.31, 23.19, 7.99, 3.50, 23.53, 22.72, 12.07, 7.45, 4.48, 2.14, 32.69, 5.53, 4.37, 6.45, 11.74, 20.09, 4.87, 85.82, 3.21, 71.31, 11.23, 19.72, 7.70, 2.39, 19.65, 4.79, 0.00, 422.93],
'2030': [4.33, 23.16, 8.29, 3.68, 23.99, 23.09, 13.18, 10.07, 5.95, 2.16, 32.49, 5.54, 4.64, 6.88, 12.48, 20.62, 5.10, 98.99, 3.24, 72.73, 12.39, 22.66, 7.49, 2.39, 23.52, 5.15, 0.00, 454.22],
'2035': [4.53, 22.89, 8.73, 3.85, 25.04, 25.89, 14.48, 12.82, 7.71, 2.18, 32.97, 5.56, 4.91, 7.38, 13.03, 21.07, 5.42, 111.61, 3.26, 72.64, 13.28, 25.41, 7.38, 2.35, 27.57, 6.24, 0.00, 488.17],
'2040': [4.61, 22.12, 9.07, 4.05, 26.81, 28.91, 15.39, 15.66, 9.70, 2.19, 33.52, 5.93, 5.20, 7.73, 13.37, 21.37, 5.67, 124.82, 3.23, 74.79, 14.06, 27.87, 7.22, 2.35, 32.08, 6.96, 0.00, 524.69],
'2045': [4.66, 21.79, 9.44, 4.28, 29.84, 30.08, 16.20, 18.07, 11.54, 2.24, 33.28, 5.92, 5.42, 8.08, 13.49, 21.44, 5.92, 136.38, 3.22, 74.85, 14.64, 30.12, 7.08, 2.38, 36.79, 7.63, 0.00, 554.77],
'2050': [4.71, 21.53, 9.84, 4.47, 30.32, 30.97, 16.93, 20.50, 13.67, 2.30, 32.99, 5.93, 5.61, 8.34, 13.32, 21.46, 6.13, 146.89, 3.20, 74.95, 15.10, 32.02, 6.95, 2.23, 41.58, 8.36, 0.00, 580.32],
'2055': [4.74, 20.55, 10.00, 4.64, 30.86, 31.28, 17.91, 23.23, 15.81, 2.37, 33.49, 5.91, 5.68, 8.35, 13.51, 21.36, 6.34, 155.91, 3.08, 73.87, 15.54, 33.20, 6.79, 2.20, 45.89, 9.07, 0.00, 601.60],
'2060': [4.45, 20.67, 10.14, 4.80, 31.21, 29.07, 18.84, 26.04, 17.72, 2.43, 34.23, 5.91, 5.75, 8.38, 13.66, 21.41, 6.54, 163.79, 2.94, 72.47, 15.93, 34.06, 6.64, 2.38, 50.01, 9.40, 0.00, 618.83],
'2065': [3.79, 21.63, 10.29, 4.97, 31.49, 28.81, 19.69, 29.13, 19.87, 2.48, 34.84, 5.88, 5.82, 8.39, 13.80, 21.39, 6.71, 170.40, 2.81, 70.95, 16.26, 34.59, 6.48, 2.61, 53.89, 9.78, 0.00, 636.75],
'2070': [3.79, 22.42, 10.43, 5.24, 31.70, 29.75, 20.46, 32.03, 22.10, 2.52, 35.47, 5.86, 5.89, 8.34, 13.90, 21.33, 6.85, 175.70, 2.70, 69.24, 16.53, 34.79, 6.31, 2.77, 57.58, 10.72, 0.00, 654.40],
'2075': [3.96, 23.34, 10.54, 5.43, 31.82, 31.83, 21.12, 34.96, 24.38, 2.56, 36.06, 5.82, 5.94, 8.23, 13.94, 21.06, 6.97, 179.69, 2.58, 67.24, 16.71, 34.72, 6.14, 2.89, 61.05, 11.53, 0.00, 670.49],
'2080': [ 4.17, 24.31, 10.60, 5.59, 31.94, 33.26, 21.65, 37.79, 26.59, 2.55, 36.43, 5.74, 5.96, 8.07, 13.92, 20.69, 7.12, 182.26, 2.45, 64.85, 16.81, 34.44, 5.95, 2.99, 64.24, 12.30, 0.00, 682.67],
'2085': [4.54, 24.78, 10.65, 5.69, 32.03, 34.31, 22.07, 40.48, 28.78, 2.52, 36.67, 5.66, 5.95, 7.85, 13.87, 20.34, 7.31, 183.54, 2.33, 62.32, 16.86, 33.99, 5.77, 3.07, 67.14, 12.97, 0.00, 691.49],
'2090': [4.87, 24.68, 10.67, 5.79, 32.12, 34.75, 22.37, 42.95, 30.94, 2.51, 36.87, 5.57, 5.92, 7.62, 13.81, 19.84, 7.43, 183.80, 2.20, 60.20, 16.88, 33.40, 5.59, 3.12, 69.83, 13.71, 0.00, 697.44],
'2095': [4.80, 24.75, 10.64, 5.87, 32.21, 32.91, 22.59, 45.27, 32.98, 2.48, 37.03, 5.46, 5.87, 7.37, 13.75, 19.36, 7.63, 183.05, 2.08, 57.91, 16.86, 32.67, 5.42, 3.17, 72.34, 14.56, 0.00, 699.04],
'2100': [ 4.44, 24.42, 10.56, 5.89, 32.29, 30.35, 22.66, 47.41, 34.74, 2.40, 37.12, 5.33, 5.81, 7.11, 13.67, 18.93, 7.78, 181.34, 1.95, 55.58, 16.77, 31.83, 5.26, 3.19, 74.49, 15.12, 0.00, 696.43],
               }
    return region_water_consumption

def IMAGE_region_WaterWithdrawal_min():
    region_water_withdrawal = {
'2005': [40.77, 276.38, 20.17, 10.72, 24.21, 35.49, 28.34, 11.00, 5.49, 7.02, 174.53, 37.78, 10.98, 26.66, 16.86, 73.38, 23.10, 136.64, 12.07, 187.69, 33.53, 38.99, 30.72, 9.86, 28.84, 4.93, 0.00, 1306.16, ],
'2010': [37.27, 261.27, 19.83, 11.22, 25.13, 39.66, 29.54, 13.75, 7.11, 7.34, 154.13, 37.09, 11.46, 27.19, 18.96, 71.94, 26.21, 178.93, 12.28, 244.04, 39.77, 44.43, 27.52, 10.02, 33.91, 6.17, 0.00, 1396.17, ],
'2015': [32.81, 238.56, 20.86, 11.53, 26.87, 42.34, 30.02, 17.37, 8.26, 7.64, 143.79, 34.84, 12.20, 26.84, 21.71, 67.86, 28.45, 216.97, 12.55, 291.06, 43.44, 54.25, 26.03, 10.17, 39.98, 7.60, 0.00, 1473.98, ],
'2020': [26.12, 224.30, 22.34, 12.17, 28.68, 43.99, 33.11, 22.78, 11.10, 8.25, 132.66, 34.19, 13.13, 27.64, 24.61, 65.95, 30.37, 251.32, 12.67, 313.25, 50.32, 65.08, 25.51, 10.10, 49.24, 9.52, 0.00, 1548.41, ],
'2025': [22.02, 202.18, 23.52, 13.05, 30.69, 46.14, 37.89, 30.02, 14.29, 8.60, 123.95, 31.39, 13.87, 26.84, 27.10, 63.17, 31.91, 283.43, 12.69, 323.43, 55.81, 75.02, 24.77, 9.86, 59.82, 12.25, 0.00, 1603.72, ],
'2030': [21.02, 187.83, 24.03, 13.52, 32.17, 48.17, 41.00, 38.47, 18.32, 8.85, 120.62, 28.54, 14.45, 27.09, 28.11, 62.95, 33.20, 308.71, 12.57, 309.88, 59.81, 81.61, 23.78, 9.58, 69.71, 14.20, 0.00, 1638.17, ],
'2035': [21.70, 161.38, 24.12, 13.98, 32.73, 48.74, 42.62, 48.85, 23.26, 9.01, 117.57, 27.34, 14.95, 27.45, 28.63, 61.72, 34.84, 329.05, 12.36, 287.46, 61.65, 86.99, 22.68, 8.98, 80.63, 16.22, 0.00, 1644.90, ],
'2040': [20.69, 126.63, 24.00, 14.36, 32.42, 47.49, 44.40, 60.85, 29.48, 9.09, 100.84, 24.21, 15.38, 27.32, 28.14, 59.73, 36.11, 355.72, 12.02, 241.99, 62.19, 91.43, 21.59, 8.59, 92.93, 19.66, 0.00, 1607.25, ],
'2045': [19.11, 113.57, 24.76, 15.00, 32.58, 48.62, 47.16, 74.17, 37.04, 9.19, 85.30, 21.70, 15.74, 26.70, 28.06, 55.93, 37.37, 393.25, 11.70, 235.59, 68.13, 97.47, 20.85, 8.64, 108.00, 24.61, 0.00, 1660.22, ],
'2050': [17.73, 103.84, 25.84, 15.43, 33.39, 49.51, 49.72, 88.98, 45.51, 9.23, 74.94, 21.08, 15.98, 27.36, 29.55, 52.06, 38.62, 432.90, 11.23, 243.71, 75.43, 102.99, 20.14, 8.63, 124.66, 30.60, 0.00, 1749.08, ],
'2055': [16.93, 98.67, 25.73, 15.57, 33.72, 47.76, 52.12, 103.81, 54.17, 9.28, 76.48, 21.86, 15.95, 26.19, 31.14, 51.60, 39.88, 468.05, 10.50, 242.05, 83.74, 107.98, 19.55, 8.76, 139.63, 36.17, 0.00, 1837.29, ],
'2060': [14.21, 96.07, 25.56, 15.49, 34.44, 46.49, 54.63, 118.83, 63.10, 9.28, 82.01, 22.32, 15.86, 25.90, 32.62, 51.60, 40.97, 501.06, 9.75, 236.89, 92.99, 113.87, 18.99, 8.91, 154.42, 41.36, 0.00, 1927.62, ],
'2065': [13.97, 95.15, 25.52, 15.38, 34.84, 46.38, 56.73, 132.57, 70.92, 9.21, 87.91, 22.10, 15.75, 26.81, 34.47, 51.42, 41.75, 531.13, 9.12, 233.28, 102.72, 119.64, 18.45, 9.09, 167.67, 45.36, 0.00, 2017.34, ],
'2070': [13.75, 94.80, 25.35, 15.35, 35.12, 46.23, 58.22, 150.65, 76.67, 9.10, 95.56, 22.77, 15.55, 26.04, 36.22, 51.90, 42.24, 555.60, 8.55, 228.65, 111.42, 123.31, 17.79, 9.29, 179.63, 49.66, 0.00, 2099.41, ],
'2075': [13.51, 94.70, 25.23, 15.42, 35.04, 46.11, 59.02, 172.38, 84.92, 8.95, 104.01, 22.65, 15.25, 25.10, 37.07, 52.62, 42.48, 576.04, 8.00, 221.73, 118.14, 124.49, 17.04, 9.45, 188.17, 56.91, 0.00, 2174.41, ],
'2080': [13.24, 94.72, 25.21, 15.23, 34.12, 46.03, 58.98, 193.85, 94.25, 8.69, 109.23, 22.51, 14.84, 24.83, 37.41, 51.81, 42.26, 589.35, 7.48, 206.38, 122.88, 123.78, 16.26, 9.50, 193.46, 64.93, 0.00, 2221.24, ],
'2085': [12.97, 93.29, 25.10, 15.10, 32.66, 45.42, 58.83, 212.74, 105.35, 8.41, 112.00, 22.44, 14.38, 23.53, 37.24, 50.04, 41.51, 595.84, 6.97, 188.10, 126.46, 121.97, 15.55, 9.41, 197.66, 72.31, 0.00, 2245.29, ],
'2090': [12.70, 90.26, 24.94, 14.81, 31.67, 43.95, 59.51, 231.95, 119.09, 8.15, 115.37, 22.34, 13.93, 22.21, 37.34, 48.28, 40.90, 599.66, 6.47, 176.57, 130.27, 120.26, 14.85, 9.23, 207.86, 79.06, 0.00, 2281.65, ],
'2095': [12.23, 86.09, 24.54, 14.39, 31.30, 40.76, 59.10, 248.58, 124.96, 7.86, 118.43, 21.97, 13.44, 20.70, 37.78, 46.20, 40.21, 596.61, 5.99, 161.96, 132.69, 118.05, 14.10, 9.03, 220.28, 84.53, 0.00, 2291.75, ],
'2100': [11.72, 81.35, 23.78, 13.96, 30.80, 38.34, 56.98, 262.07, 128.33, 7.50, 118.64, 20.63, 12.87, 19.58, 37.90, 43.82, 39.30, 585.48, 5.47, 144.80, 131.95, 114.33, 13.29, 8.77, 227.85, 89.87, 0.00, 2269.39, ],
            }
    return region_water_withdrawal


def IMAGE_region_WaterConsumption_max():
    region_water_consumption = { 
'2005': [ 4.23, 23.49, 6.37, 2.62, 15.19, 15.54, 8.85, 2.88, 1.4, 1.67, 36.23, 5.16, 2.91, 5.31, 6.23, 18.83, 3.28, 35.15, 2.75, 32.06, 5.65, 10.02, 9.14, 2.27, 8.94, 2.31, 0, 268.49],
'2010': [ 4.09, 23.56, 6.94, 2.86, 16.96, 15.95, 9.6, 3.32, 2.1, 1.9, 34.47, 5.45, 3.3, 5.82, 7.67, 19.57, 3.73, 45.81, 2.93, 44.49, 6.69, 11.7, 8.33, 2.3, 11.03, 2.82, 0, 303.37],
'2015': [ 4.34, 23.71, 7.17, 3.19, 18.67, 17.93, 9.52, 4.15, 2.57, 1.98, 34.01, 5.28, 3.72, 5.76, 9.16, 19.22, 4.28, 57.88, 3.13, 57.11, 8.53, 13.77, 8.14, 2.38, 13.08, 3.32, 0, 342. ], 
'2020': [ 4.35, 24.13, 7.62, 3.4, 22.01, 20.73, 10.71, 5.85, 3.46, 2.19, 33.59, 5.5, 4.12, 6.13, 10.53, 19.57, 4.64, 72.04, 3.25, 66.42, 10.07, 16.65, 7.92, 2.45, 16.16, 4.27, 0, 387.77],
'2025': [ 4.42, 24.21, 7.95, 3.49, 23.94, 23.09, 12.07, 7.74, 4.72, 2.33, 33.83, 5.77, 4.39, 6.53, 11.78, 20.19, 4.94, 86.68, 3.36, 72.72, 11.34, 19.75, 7.77, 2.49, 19.74, 4.88, 0, 430.16],
'2030': [ 4.52, 24.36, 8.42, 3.7, 26.14, 25.16, 13.35, 10.02, 6.12, 2.46, 33.99, 5.92, 4.67, 7., 12.6, 20.81, 5.07, 100.49, 3.42, 77.67, 12.52, 22.73, 7.59, 2.53, 23.67, 5.64, 0, 470.57],
'2035': [ 4.61, 24.1, 8.82, 3.87, 27.88, 27.09, 14.48, 12.58, 7.85, 2.53, 34.03, 6.05, 4.95, 7.54, 13.22, 21.3, 5.31, 113.64, 3.44, 79.99, 13.54, 25.52, 7.4, 2.57, 27.8, 6.33, 0, 506.42],
'2040': [ 4.67, 23.74, 9.19, 4.09, 29.26, 29.03, 15.42, 15.24, 9.81, 2.56, 33.95, 6.15, 5.22, 7.9, 13.53, 21.62, 5.52, 126.99, 3.43, 80.82, 14.34, 28.02, 7.24, 2.59, 32.43, 7.07, 0, 539.8 ],
'2045': [ 4.72, 23.49, 9.54, 4.32, 29.9, 30.24, 16.22, 17.82, 11.68, 2.64, 33.75, 6.18, 5.45, 8.18, 13.58, 21.71, 5.72, 138.62, 3.41, 80.68, 14.89, 30.26, 7.1, 2.62, 37.17, 7.74, 0, 567.65],
'2050': [ 4.76, 23.16, 9.89, 4.55, 30.41, 31.16, 16.95, 20.66, 13.77, 2.72, 33.73, 6.18, 5.66, 8.42, 13.37, 21.62, 5.91, 149.19, 3.37, 79.62, 15.31, 32.16, 6.97, 2.65, 41.96, 8.49, 0, 592.63],
'2055': [ 4.82, 22.9, 10.02, 4.77, 30.77, 32.11, 17.9, 23.53, 15.71, 2.79, 34.11, 6.11, 5.73, 8.41, 13.55, 21.4, 6.06, 158.23, 3.23, 77.42, 15.69, 33.32, 6.8, 2.71, 46.29, 9.26, 0, 613.65],
'2060': [ 4.89, 22.78, 10.11, 4.99, 31.01, 33.48, 18.79, 26.33, 17.78, 2.83, 34.56, 6.04, 5.79, 8.4, 13.7, 21.34, 6.19, 166.02, 3.08, 74.81, 16., 34.15, 6.64, 2.76, 50.42, 10.06, 0, 632.93],
'2065': [ 4.94, 22.68, 10.17, 5.19, 31.23, 33.99, 19.59, 29.09, 19.96, 2.83, 35., 5.96, 5.84, 8.37, 13.82, 21.25, 6.29, 172.44, 2.92, 71.84, 16.22, 34.6, 6.47, 2.79, 54.3, 10.86, 0, 648.66],
'2070': [ 5., 22.55, 10.22, 5.39, 31.41, 34.95, 20.26, 31.83, 22.1, 2.79, 35.36, 5.85, 5.86, 8.28, 13.9, 21.08, 6.38, 177.52, 2.75, 68.63, 16.36, 34.73, 6.3, 2.83, 57.94, 11.62, 0, 661.88],
'2075': [ 5.04, 22.32, 10.23, 5.57, 31.56, 36.11, 20.8, 34.51, 24.24, 2.75, 35.56, 5.72, 5.86, 8.14, 13.91, 20.78, 6.47, 181.19, 2.59, 65.38, 16.41, 34.6, 6.13, 2.85, 61.32, 12.36, 0, 672.38],
'2080': [ 5.07, 22.08, 10.21, 5.73, 31.66, 37.53, 21.23, 37.08, 26.35, 2.7, 35.69, 5.56, 5.83, 7.95, 13.88, 20.39, 6.56, 183.51, 2.44, 62.42, 16.41, 34.24, 5.95, 2.86, 64.38, 13.06, 0, 680.79],
'2085': [ 5.1, 21.88, 10.16, 5.88, 31.75, 38.4, 21.55, 39.56, 28.39, 2.65, 35.8, 5.41, 5.78, 7.73, 13.83, 19.95, 6.63, 184.57, 2.3, 59.61, 16.38, 33.73, 5.77, 2.87, 67.14, 13.72, 0, 686.53],
'2090': [ 5.11, 21.73, 10.1, 6., 31.82, 39.18, 21.79, 41.95, 30.37, 2.61, 35.85, 5.26, 5.72, 7.48, 13.78, 19.52, 6.69, 184.62, 2.17, 56.99, 16.32, 33.08, 5.6, 2.9, 69.62, 14.35, 0, 690.63],
'2095': [ 5.12, 21.52, 10.02, 6.11, 31.89, 39.89, 21.97, 44.25, 32.28, 2.58, 35.85, 5.14, 5.65, 7.23, 13.73, 19.06, 6.72, 183.75, 2.05, 54.7, 16.24, 32.31, 5.43, 2.94, 71.93, 14.91, 0, 693.28],
'2100': [ 5.1, 21.22, 9.93, 6.19, 31.97, 40.57, 22.06, 46.42, 34.09, 2.54, 35.77, 5.03, 5.56, 6.96, 13.65, 18.55, 6.71, 181.97, 1.94, 52.72, 16.14, 31.42, 5.27, 2.96, 73.96, 15.48, 0, 694.19]
               }
    return region_water_consumption

def IMAGE_region_WaterWithdrawal_max():
    region_water_withdrawal = {
'2005': [ 40.77, 276.38, 20.17, 10.72, 24.21, 35.49, 28.34, 11., 5.49, 7.02, 174.53, 37.78, 10.98, 26.66, 16.86, 73.38, 23.1, 136.64, 12.07, 187.69, 33.53, 38.99, 30.72, 9.86, 28.84, 4.93, 0, 1306.16],
'2010': [ 37.27, 261.27, 19.83, 11.22, 25.13, 39.66, 29.54, 13.75, 7.11, 7.34, 154.13, 37.09, 11.46, 27.19, 18.96, 71.94, 26.21, 178.93, 12.28, 244.04, 39.77, 44.43, 27.52, 10.02, 33.91, 6.17, 0, 1396.17],
'2015': [ 33.24, 242.56, 20.86, 11.53, 26.87, 42.34, 30.03, 17.37, 8.26, 7.65, 144.99, 35.28, 12.2, 26.84, 21.71, 67.87, 28.64, 220.12, 12.63, 291.11, 43.4, 54.29, 26.09, 10.25, 39.98, 7.6, 0, 1483.73],
'2020': [ 28.43, 240.76, 22.33, 12.18, 28.64, 43.87, 33.02, 22.64, 11.1, 8.33, 136.95, 35.2, 13.12, 27.56, 24.75, 65.95, 30.84, 263.44, 12.94, 315.34, 50.21, 65.68, 25.69, 10.43, 49.38, 9.56, 0, 1588.35],
'2025': [ 27.24, 230.3, 22.9, 12.75, 31.04, 45.81, 36.42, 29.95, 14.61, 8.86, 132.34, 35.91, 13.93, 28.69, 27.94, 66.47, 32.41, 311.34, 13.11, 347.36, 57.19, 76.17, 25.11, 10.58, 61.5, 12.64, 0, 1712.55],
'2030': [ 27.02, 222.49, 24.6, 13.74, 33.25, 48.29, 39.77, 39.21, 19.28, 9.24, 130., 36.77, 14.63, 29.91, 29.64, 67.07, 32.87, 362.43, 13.13, 386.95, 65.9, 85.26, 24.27, 10.67, 75.8, 16.66, 0, 1858.84],
'2035': [ 26.65, 207.18, 25.53, 14.49, 34.95, 50.15, 42.81, 50.52, 24.94, 9.48, 125.95, 37.57, 15.32, 30.93, 30.53, 65.5, 34.01, 410.05, 12.96, 402.73, 76.59, 93.39, 23.29, 10.71, 90.76, 20.79, 0, 1967.77],
'2040': [ 25.32, 192.19, 26.25, 15.25, 35.56, 51.72, 45.71, 64.55, 31.88, 9.58, 114.28, 37.52, 15.82, 30.74, 30.72, 62.71, 35.09, 448.7, 12.65, 403.1, 80.5, 100.52, 22.16, 10.66, 107.36, 25.36, 0, 2035.91],
'2045': [ 23.21, 179.13, 27.07, 16.13, 35.87, 52.88, 48.34, 80.22, 39.87, 9.72, 99.43, 37.52, 16.12, 29.95, 30.61, 59.77, 36.12, 493.37, 12.23, 396.4, 84.94, 106.77, 21.05, 10.75, 123.88, 31.11, 0, 2102.46],
'2050': [ 21.55, 162.75, 27.71, 17.19, 36.07, 54.03, 51.11, 97.98, 49.1, 9.79, 91.98, 36.89, 16.31, 29.49, 30.49, 57.72, 37.16, 537.75, 11.65, 381.93, 89.49, 112.15, 19.97, 10.88, 140.95, 38.31, 0, 2170.4 ],
'2055': [ 20.51, 148.16, 27.43, 18.43, 35.61, 54.82, 53.27, 115.45, 59.22, 9.83, 91.91, 35.04, 16.23, 28.1, 31.58, 55.34, 38.03, 576.88, 10.86, 353.6, 92.88, 116.12, 18.91, 10.95, 157.6, 46.86, 0, 2223.63],
'2060': [ 19.46, 134.57, 27.08, 19.73, 34.87, 56.05, 55.02, 133.56, 70.04, 9.81, 93.3, 33.61, 16.06, 26.8, 33.17, 53.46, 38.65, 611.23, 10.05, 322.3, 94.49, 119.51, 17.98, 10.85, 174.04, 56.85, 0, 2272.52],
'2065': [ 18.46, 123.57, 26.81, 20.94, 34.02, 56.66, 56.37, 154.02, 80.21, 9.69, 94.87, 32.18, 15.79, 25.38, 34.08, 51.67, 39.07, 639.96, 9.28, 284.94, 94.17, 118.72, 17.07, 10.65, 189.79, 67.24, 0, 2305.62],
'2070': [ 17.56, 113.58, 26.35, 22.05, 33.02, 57.47, 56.92, 180.02, 90.24, 9.49, 94.86, 29.79, 15.4, 23.87, 34.69, 49.63, 39.29, 662.05, 8.49, 242.72, 91.13, 115.74, 16.02, 10.45, 204.54, 77.58, 0, 2322.96],
'2075': [ 16.54, 102.42, 25.59, 23.06, 31.72, 58.43, 56.86, 208.58, 101.97, 9.25, 91.9, 26.8, 14.93, 22.59, 34.96, 47.33, 39.28, 676.44, 7.73, 203.21, 86.85, 111.43, 14.96, 10.12, 218.81, 88.12, 0, 2329.89],
'2080': [ 15.82, 92.89, 24.76, 23.95, 30.29, 59.48, 56.56, 238.82, 115.27, 8.97, 88.66, 23.19, 14.45, 21.13, 35.09, 45.18, 39.04, 687.3, 7.07, 172.41, 82.62, 106.06, 14.04, 9.77, 232.74, 98.98, 0, 2344.53],
'2085': [ 15.57, 87.18, 23.92, 24.75, 28.73, 60.23, 55.64, 271.63, 129.24, 8.68, 86.91, 19.59, 13.97, 19.36, 35.12, 43.1, 38.58, 692.95, 6.51, 146.25, 79.19, 100.59, 13.31, 9.47, 245.34, 108.99, 0, 2364.79],
'2090': [ 15.39, 84.56, 23.2, 25.37, 27.16, 59., 54.72, 305.12, 143.72, 8.4, 85.48, 17.41, 13.49, 17.5, 35.23, 41.12, 37.97, 696.1, 6.01, 124.14, 76.22, 95.42, 12.61, 9.39, 258.31, 119.61, 0, 2392.66],
'2095': [ 15.03, 82.18, 22.61, 25.93, 25.22, 56.1, 53.87, 338.7, 158.56, 8.13, 83.63, 16.64, 12.99, 16.08, 35.39, 38.77, 37.27, 696.66, 5.57, 109.35, 73.96, 89.81, 11.93, 9.41, 273.17, 131.4, 0, 2428.38],
'2100': [ 14.43, 79.58, 22.09, 26.12, 23.99, 53.03, 53.09, 371.87, 171.9, 7.82, 82.76, 16.21, 12.48, 15.03, 34.92, 36.62, 36.43, 691.8, 5.15, 99.95, 72.16, 84.08, 11.28, 9.44, 286.4, 142.33, 0, 2460.97]
            }
    return region_water_withdrawal

def IMAGE_region_Irrigation():
    region_water_withdrawal = {
'2005': [ 4.72, 142.81, 65.58, 7.91, 9.59, 68.69, 47.25, 9.27, 39.76, 11.96, 66.61, 27.31, 45.89, 10.15, 82.19, 40.36, 112.32, 391.36, 5.38, 293.93, 35.96, 6.40, 1.43, 23.58, 262.17, 3.88, 0.00, 1816.45],
'2010': [ 3.69, 136.50, 65.61, 7.77, 12.25, 71.84, 45.97, 11.24, 42.81, 12.17, 65.06, 27.56, 49.01, 11.26, 84.67, 37.32, 122.13, 347.89, 5.52, 316.55, 35.37, 6.41, 1.52, 26.93, 280.03, 4.33, 0.00, 1831.44],
'2015': [ 4.81, 146.49, 66.06, 6.98, 9.71, 69.70, 50.94, 13.24, 44.33, 11.98, 72.33, 28.43, 52.53, 11.41, 87.11, 40.11, 123.60, 363.22, 6.69, 316.93, 38.03, 8.75, 2.30, 26.67, 282.36, 4.66, 0.00, 1889.41],
'2020': [ 3.22, 133.23, 71.18, 7.79, 10.93, 75.49, 56.56, 15.86, 43.80, 12.91, 73.47, 27.57, 56.96, 11.24, 77.94, 39.90, 140.74, 353.49, 6.56, 338.55, 45.54, 7.40, 2.63, 25.33, 261.08, 6.08, 0.00, 1905.46],
'2030': [ 4.34, 151.41, 68.16, 7.54, 13.24, 84.43, 56.32, 18.35, 46.03, 12.93, 69.40, 27.38, 53.47, 10.50, 81.07, 37.69, 126.46, 341.49, 8.27, 351.13, 42.01, 9.09, 1.60, 27.30, 272.51, 6.90, 0.00, 1928.99],
'2040': [ 4.17, 140.52, 73.15, 9.08, 12.95, 88.06, 55.07, 22.04, 48.51, 12.48, 76.20, 25.21, 56.27, 11.37, 79.74, 38.44, 144.84, 298.58, 5.59, 328.30, 45.24, 9.01, 1.42, 27.85, 269.44, 6.96, 0.00, 1890.48],
'2050': [ 3.82, 148.05, 73.82, 8.31, 13.53, 96.33, 56.22, 23.89, 51.64, 13.17, 74.34, 26.52, 55.65, 10.73, 82.22, 38.19, 123.43, 363.29, 6.01, 341.90, 40.25, 11.34, 0.91, 28.27, 280.55, 8.92, 0.00, 1981.27],
'2060': [ 3.39, 149.55, 76.58, 8.16, 12.24, 93.50, 61.60, 28.29, 53.92, 13.45, 78.72, 27.46, 60.35, 11.73, 88.26, 42.30, 149.55, 374.18, 6.20, 338.81, 46.52, 8.18, 2.79, 24.99, 259.95, 10.03, 0.00, 2030.70],
'2070': [ 3.87, 145.60, 72.74, 8.82, 13.35, 97.94, 56.44, 31.67, 56.93, 13.16, 84.67, 26.84, 60.29, 10.97, 84.60, 38.33, 118.60, 318.93, 6.74, 324.22, 42.05, 7.62, 5.22, 24.67, 246.82, 10.26, 0.00, 1911.36],
'2080': [ 4.41, 150.26, 78.93, 8.89, 12.76, 102.74, 59.94, 34.14, 59.06, 13.10, 81.38, 28.32, 65.37, 12.42, 85.01, 40.30, 128.86, 358.09, 6.23, 330.66, 47.85, 13.17, 2.35, 29.45, 213.30, 11.33, 0.00, 1978.29],
'2090': [ 4.42, 143.46, 69.01, 8.79, 12.20, 104.50, 61.22, 35.45, 60.45, 13.79, 74.71, 28.86, 61.70, 10.65, 83.87, 39.60, 130.47, 364.53, 5.26, 309.97, 40.05, 11.28, 2.16, 28.85, 264.32, 11.65, 0.00, 1981.21],
'2100': [ 4.31, 148.57, 77.27, 8.74, 12.31, 103.97, 57.89, 37.23, 58.96, 13.43, 80.39, 26.90, 60.49, 10.40, 82.08, 40.25, 136.63, 388.69, 7.41, 326.62, 45.46, 15.08, 2.12, 30.57, 245.78, 11.20, 0.00, 2032.74],
            }
    return region_water_withdrawal

def IMAGE_region_WaterAccessibility():
    region_water_accesibility = [ 0.05, 0.4, 0.4, 0.4, 0.05, 
                                  0.4, 0.4, 0.4,
                                  0.4, 0.4,
                                  0.4, 0.4, 0.4, 0.4,
                                  0.4, 0.05, 0.4, 0.4,
                                  0.4, 0.4, 0.4, 
                                  0.4, 0.4, 0.4,
                                  0.4, 0.4,
                                  1.0, 0.30
                                  ]
    return region_water_accesibility 

def IMAGE_region_dict():
    dictionary = { 'Name': IMAGE_region_names(),
                   'ShortName': IMAGE_region_shortnames(),
                   'Index': IMAGE_region_index(),
                   'AnthroFraction':IMAGE_region_AnthroFrac(), 
                   'WaterWithdrawal':IMAGE_region_WaterWithdrawal_min(),
                   'WaterConsumption':IMAGE_region_WaterConsumption_min(),
                   'WaterWithdrawal_min':IMAGE_region_WaterWithdrawal_min(),
                   'WaterConsumption_min':IMAGE_region_WaterConsumption_min(),
                   'WaterAccessibility': IMAGE_region_WaterAccessibility(),
                   'Irrigation': IMAGE_region_Irrigation(),
                   'Nregions': len(IMAGE_region_names()),
                   'NCvarname':'IMAGE_region',
                   }
    return dictionary

def GCP_region_names():
    region_names = [ 
                     'Boreal North America', 'USA Contiguous', 'Central North America',
                     'Tropical South America','Temperate South America',
                     'Northern Africa', 'Southern Africa',
                     'Russia', 'Oceania', 'Europe', 'China', 'India',
                     'South East Asia', 'Central Eurasia and Japan'
                     ]
    return region_names

def GCP_region_index():
    region_index = [ 1,2,3,4,5,6,7,8,9,10,11,12,13,14 ]
    return region_index

def GCP_region_shortnames():
    region_shortnames = [ 
                     'BoNAme', 'USAcont', 'CAme',
                     'TrSAme', 'TeSAme',
                     'NoAfr', 'SoAfr', 
                     'Rus', 'Oce', 'Eur', 'Chi', 'Ind',
                     'SEAs', 'CEuAsJ',
                     ]

    return region_shortnames
    
def GCP_region_AnthroFrac():
    region_anthrofracs = [ 
                   0.013864818, 0.069489147, 0.022832934, 
                   0.080355424, 0.018403895,
                   0.062611758, 0.027096916,
                   0.065940414, 0.018706501, 0.07179995, 0.232015625, 0.084674424,
                   0.100905065, 0.131303128
                        ]
    return region_anthrofracs

def GCP_region_2000_2009_BUWL_Saunois_models():
    models=['CLM4.5','CTEM','DLEM','JULES','LPJ-MPI','LPJ-wsl','LPX-Bern','ORCHIDEE','SDGVM','TRIPLEX-GHG','VISIT']
    return models
    
def GCP_region_2003_2012_BUWL_Saunois_models():
    models=['CLM4.5','CTEM','DLEM','JULES','LPJ-MPI','LPJ-wsl','LPX-Bern','ORCHIDEE','SDGVM','TRIPLEX-GHG','VISIT']
    return models
    
def GCP_region_2000_2009_BUWL_Saunois():
    region_2000_2009_BU = {
            'BoNAme': [42.1, 34.3, 22.1, 43.4, 58.0, 15.0, 17.0, 31.0, 28.0, 18.7, 30.6],
            'USAcont': [16.8, 15.4, 7.9, 8.9, 14.1, 5.3, 12.6, 7.4, 12.5, 22.7, 15.6],
            'CAme': [2.7, 3.0, 4.0, 1.8, 3.2, 1.7, 3.0, 1.3, 3.4, 1.5, 1.2], 
            'TrSAme':[50.4, 37.3, 47.1, 18.9, 38.4, 56.9, 49.9, 59.7, 41.7, 26.5, 37.7],
            'TeSAme':[3.3, 6.4, 4.9, 1.0, 6.6, 3.3, 5.4, 5.0, 5.8, 5.1, 3.4],
            'NoAfr':[4.0, 8.5, 11.2, 4.0, 11.2, 7.5, 8.3, 4.8, 15.9, 3.3, 6.0],
            'SoAfr':[18.5, 18.5, 17.6, 19.8, 21.7, 18.0, 19.9, 21.5, 18.3, 14.9, 21.0],
            'Rus':[16.4, 15.4, 8.7, 20.1, 26.0, 4.6, 10.8, 13.3, 12.0, 8.4, 17.4],
            'Oce':[2.4, 2.7, 4.9, 0.9, 3.6, 1.3, 2.2, 2.1, 6.4, 5.1, 3.1],
            'Eur':[4.5, 7.2, 3.7, 3.9, 6.1, 0.9, 4.6, 2.9, 5.2, 4.0, 0.8],
            'Chi':[6.7, 7.0, 5.4, 1.2, 4.4, 1.4, 5.2, 2.4, 5.0, 8.9, 8.6],
            'Ind':[5.9, 9.2, 2.9, 1.9, 4.9, 4.2, 6.0, 1.1, 7.3, 5.9, 12.5],
            'SEAs':[29.7, 25.0, 22.6, 60.8, 21.1, 30.7, 26.5, 18.2, 23.9, 26.2, 34.7],
            'CEuAsJ':[2.6, 5.5, 4.7, 0.9, 3.1, 0.7, 2.1, 2.7, 4.7, 4.3, 3.9],
            'Global':[205.7, 195.0, 167.6, 187.2, 222.0, 151.4, 173.2, 173.1, 189.7, 155.1, 196.2], 
            '<30 N':[122.7, 116.7, 117.4, 113.8, 113.6, 125.6, 124.9, 114.9, 126.8, 95.9, 123.1],
            '30-60 N':[61.3, 62.5, 35.8, 52.3, 69.8, 19.7, 36.7, 39.5, 45.1, 50.5, 58.6,],
            '60-90 N':[21.9, 15.8, 14.6, 21.2, 38.8, 6.2, 11.7, 18.9, 18.0, 8.9, 14.6],
               }
    return region_2000_2009_BU

def GCP_region_2003_2012_BUWL_Saunois():
    region_2003_2012_BU = {
            'BoNAme': [42.4, 34.9, 22.5, 46.1, 60.8, 15.3, 17.4, 31.9, 28.8, 19.6, 31.5],
            'USAcont': [16.9, 15.7, 7.9, 9.2, 14.6, 5.5, 12.9, 7.4, 12.7, 22.8, 16.1],
            'CAme': [2.8, 3.0, 4.1, 1.8, 3.3, 1.7, 3.2, 1.3, 3.5, 1.5, 1.2], 
            'TrSAme':[50.8, 36.9, 47.0, 18.8, 38.8, 57.0, 49.3, 59.3, 41.6, 25.4, 36.5],
            'TeSAme':[3.2, 6.1, 4.8, 1.0, 6.6, 3.3, 5.1, 4.8, 5.6, 4.9, 3.4],
            'NoAfr':[4.0, 8.6, 11.0, 4.2, 11.1, 8.0, 8.7, 4.8, 15.9, 3.2, 6.0],
            'SoAfr':[18.8, 18.6, 17.7, 20.1, 22.1, 18.2, 20.0, 21.2, 18.3, 14.6, 20.8],
            'Rus':[16.2, 15.4, 8.8, 20.7, 26.5, 4.6, 10.9, 13.4, 12.4, 8.4, 17.1],
            'Oce':[2.5, 2.7, 4.9, 0.9, 3.7, 1.3, 2.2, 2.1, 6.1, 5.1, 2.9],
            'Eur':[4.6, 7.2, 3.8, 4.0, 6.2, 0.9, 4.6, 2.9, 5.3, 4.1, 0.9],
            'Chi':[6.9, 7.1, 5.4, 1.2, 4.4, 1.4, 5.2, 2.2, 5.0, 8.7, 9.0],
            'Ind':[5.9, 9.2, 2.7, 1.9, 4.8, 4.1, 5.9, 1.0, 7.1, 5.6, 12.6],
            'SEAs':[29.8, 25.2, 22.8, 61.7, 21.6, 30.9, 26.9, 18.4, 24.5, 26.3, 34.6],
            'CEuAsJ':[2.7, 5.6, 4.7, 0.9, 3.2, 0.7, 2.2, 2.7, 4.8, 4.3, 4.0],
            'Global':[207.2, 195.8, 168.0, 192.2, 227.2, 152.8, 173.9, 173.2, 191.2, 154.2, 196.2],
            '<30 N':[123.8, 116.6, 117.2, 115.2, 114.9, 126.5, 124.8, 114.2, 126.9, 94.0, 121.7],
            '30-60 N':[61.6, 63.3, 36.0, 55.2, 72.2, 20.1, 37.3, 39.9, 45.9, 51.3, 59.9],
            '60-90 N':[21.9, 16.0, 14.9, 21.9, 40.3, 6.3, 11.9, 19.3, 18.6, 9.1, 14.7],
               }
    return region_2003_2012_BU


def GCP_region_2000_2009_TDWL_Saunois_models():
    models=['TM5-EC-JRC/SURF', 'LMDz-MIOP/IAV/ISO', 'LMDz-MIOP/IAV/NOAAONLY', 'LMDz-MIOP/IAV/OHCST', 
            'LMDz-MIOP/IAV/REF', 'LMDz-MIOP/INCA/ISO', 'LMDz-MIOP/INCA/NOAAONLY', 'LMDz-MIOP/INCA/OHCST', 
            'LMDz-MIOP/INCA/REF', 'CT-CH4/SURF', 'TM5-SRON/SCIA', 'TM5-SRON/SURF', 'GELCA/SURF', 'ACTM/SURF']
    return models

def GCP_region_2000_2009_TDWL_Saunois():
    region_2000_2009_TD = {
            'BoNAme': [13.8, 8.1, 17.0, 8.2, 8.1, 7.9, 11.7, 8.1, 8.1, 7.1, 9.2, 9.2, 16.6, 20.8],
            'USAcont': [6.7, 5.7, 6.5, 6.1, 6.1, 6.1, 6.6, 6.7, 6.7, 8.3, 8.1, 8.8, 11.9,  13.5],
            'CAme': [2.0, 0.4, 0.4, 0.4, 0.4, 1.4, 1.5, 1.5, 1.5, 5.6, 1.0, 2.2, 2.8, 2.2],
            'TrSAme':[60.4, 39.8, 43.8, 44.8, 45.3, 27.5, 28.6, 29.0, 29.3, 37.0, 44.4, 28.5, 49.4, 40.8],
            'TeSAme':[5.0, 4.5, 4.7, 4.9, 4.8, 14.8, 13.7, 14.9, 14.8, 19.4, 5.5, 6.0, 5.9, 7.4],
            'NoAfr':[10.0, 8.6, 8.8, 9.4, 9.4, 13.3, 13.0, 13.6, 13.7, 24.0, 11.6, 8.2, 12.3, 13.1], 
            'SoAfr':[30.6, 23.3, 25.9, 26.0, 26.1, 17.0, 18.2, 17.8, 18.0, 23.1, 18.0, 11.2, 18.0, 18.3], 
            'Rus':[13.2, 14.8, 11.3, 14.5, 14.4, 19.0, 18.4, 20.3, 20.2, 14.6, 13.9, 12.2, 10.6, 9.8], 
            'Oce':[1.5, 0.7, 1.4, 0.8, 0.8, 1.5, 2.2, 1.7, 1.7, 11.4, 0.7, 2.0, 1.7, 1.6], 
            'Eur':[1.6, 0.8, 0.9, 0.9, 0.9, 1.8, 2.5, 2.0, 2.0, 2.3, 4.5, 3.9, 1.4, 1.6], 
            'Chi':[4.6, 4.2, 4.0, 4.5, 4.5, 3.9, 4.3, 4.5, 4.5, 4.2, 6.8, 7.4, 5.4, 4.9], 
            'Ind':[9.0, 7.1, 6.7, 7.6, 7.6, 0.2, 0.2, 0.2, 0.2, 0.2, 4.3, 4.3, 11.2, 7.2], 
            'SEAs':[41.2, 32.2, 42.4, 38.8, 39.2, 22.5, 25.8, 23.6, 23.9, 32.0, 7.7, 16.0, 30.3, 19.4], 
            'CEuAsJ':[1.6, 1.5, 1.3, 1.5, 1.5, 6.1, 6.9, 6.9, 6.9, 5.3, 1.9, 4.3, 1.6, 1.4], 
            'Global':[203.6, 151.5, 174.8, 168.2, 169.0, 142.9, 153.1, 150.6, 151.1, 194.3, 138.5, 125.2, 178.9, 161.9], 
            '<30 N':[166.5, 119.5, 137.0, 135.9, 136.8, 99.5, 104.5, 103.8, 104.5, 156.7, 98.1, 83.1, 136.6, 114.4],
            '30-60 N':[24.8, 20.3, 26.5, 20.7, 20.7, 29.6, 34.4, 32.4, 32.3, 24.6, 26.4, 32.2, 29.8, 36.0], 
            '60-90 N':[12.4, 11.8, 11.3, 11.6, 11.6, 13.9, 14.4, 14.5, 14.4, 13.1, 14.2, 10.0, 12.5, 11.7],  
               }
    return region_2000_2009_TD

def GCP_region_2003_2012_TDWL_Saunois_models():
    models=['TM5-EC-JRC-SURF', 'LMDz-MIOP-IAV-ISO', 'LMDz-MIOP-IAV-NOAAONLY', 'LMDz-MIOP-IAV-OHCST', 
            'LMDz-MIOP-IAV-REF', 'LMDz-MIOP-INCA-ISO', 'LMDz-MIOP-INCA-NOAAONLY', 'LMDz-MIOP-INCA-OHCST', 
            'LMDz-MIOP-INCA-REF', 'CT-CH4-SURF', 'TM5-SRON-SCIA', 'TM5-SRON-SURF', 'GELCA-SURF', 'LMDz-PYVAR-BG-AR4', 
            'LMDz-PYVAR-BG-KE', 'LMDz-PYVAR-BG-TD', 'LMDz-PYVAR-EXT-AR4', 'LMDz-PYVAR-EXT-KE', 'LMDz-PYVAR-EXT-TD', 'ACTM-SURF']
    return models

def GCP_region_2003_2012_TDWL_Saunois():
    region_2003_2012_TD = {
            'BoNAme': [13.4, 9.5, 17.5, 9.6, 9.6, 9.0, 11.9, 9.1, 9.1, 7.1, 9.0, 9.1, 16.6, 14.6, 14.6, 15.1, 13.3, 12.4, 12.5, 20.7],
            'USAcont': [6.6, 5.6, 6.4, 6.0, 6.0, 5.9, 6.5, 6.5, 6.4, 8.4, 8.1, 8.9, 12.3, 6.3, 6.4, 6.6, 6.2, 6.3, 6.7, 13.4],
            'CAme': [2.0, 0.3, 0.4, 0.4, 0.4, 1.4, 1.4, 1.4, 1.4, 5.9, 1.1, 2.3, 2.8, 2.2, 2.2, 2.3, 2.2, 2.3, 2.3, 2.2],
            'TrSAme':[61.1, 36.7, 39.4, 41.6, 41.0, 25.3, 26.1, 27.2, 26.8, 38.1, 45.9, 29.9, 48.4, 53.0, 52.4, 49.3, 54.5, 51.8, 49.3, 41.4],
            'TeSAme':[5.0, 4.6, 4.7, 4.9, 4.9, 15.0, 13.4, 14.9, 14.8, 19.2, 5.6, 6.0, 5.7, 4.4, 4.3, 4.1, 4.5, 4.3, 4.0, 7.5], 
            'NoAfr':[10.0, 8.3, 8.7, 9.1, 9.0, 14.0, 13.9, 14.4, 14.2, 24.2, 11.7, 8.3, 12.6, 8.1, 8.2, 8.3, 8.2, 8.1, 8.3, 13.5],
            'SoAfr':[29.3, 23.8, 26.4, 26.6, 26.5, 17.9, 19.2, 19.0, 18.9, 23.1, 18.2, 11.3, 18.0, 20.9, 21.1, 21.1, 21.6, 20.6, 21.0, 18.6],
            'Rus':[13.1, 14.1, 11.5, 13.8, 13.8, 18.8, 19.0, 20.0, 19.9, 14.9, 13.8, 12.1, 11.0, 12.0, 11.8, 12.5, 11.5, 12.0, 12.9, 9.7],
            'Oce':[1.5, 0.8, 1.4, 0.8, 0.8, 1.7, 2.4, 1.8, 1.8, 11.6, 0.7, 2.0, 1.6, 1.5, 1.5, 1.4, 1.5, 1.4, 1.4, 1.5],
            'Eur':[1.5, 0.7, 0.8, 0.7, 0.7, 1.9, 2.2, 2.1, 2.1, 2.1, 4.5, 4.0, 1.5, 1.6, 1.5, 1.5, 1.5, 1.5, 1.5, 1.6],
            'Chi':[4.5, 4.1, 4.0, 4.5, 4.4, 3.8, 4.2, 4.4, 4.3, 4.3, 6.9, 7.4, 5.4, 3.2, 3.2, 3.1, 3.1, 3.3, 3.3, 4.9],
            'Ind':[8.4, 6.9, 6.7, 7.5, 7.4, 0.2, 0.2, 0.2, 0.2, 0.2, 4.3, 4.3, 10.4, 5.7, 5.8, 5.3, 5.8, 5.9, 6.2, 7.2],
            'SEAs':[41.1, 35.7, 45.5, 41.9, 41.6, 25.1, 28.4, 26.2, 26.1, 32.0, 8.4, 16.1, 27.9, 37.9, 37.9, 36.4, 38.4, 37.2, 36.3, 19.7],
            'CEuAsJ':[1.6, 1.4, 1.3, 1.5, 1.4, 6.3, 6.7, 7.1, 7.1, 5.2, 1.8, 4.1, 1.6, 1.6, 1.6, 1.6, 1.5, 1.6, 1.7, 1.4],
            'Global':[201.6, 152.4, 174.3, 168.8, 167.4, 146.0, 155.1, 153.9, 152.8, 196.3, 140.8, 126.7, 175.5, 173.4, 172.8, 168.7, 174.3, 169.2, 167.8, 163.4],
            '<30 N':[165.0, 120.0, 136.1, 136.0, 134.7, 101.8, 106.2, 106.5, 105.5, 158.5, 100.7, 84.9, 132.3, 137.2, 136.8, 131.3, 140.1, 135.1, 132.3, 116.1],
            '30-60 N':[24.4, 20.9, 26.8, 21.4, 21.3, 30.4, 34.5, 33.1, 33.0, 24.7, 26.4, 32.0, 30.4, 23.9, 23.8, 24.7, 22.3, 21.8, 22.6, 35.8],
            '60-90 N':[12.3, 11.6, 11.5, 11.4, 11.4, 13.9, 14.4, 14.5, 14.4, 13.3, 13.9, 10.0, 12.9, 12.4, 12.3, 12.8, 12.0, 12.3, 13.0, 11.6],
               }
    return region_2003_2012_TD

def GCP_region_dict():
    dictionary = { 'Name': GCP_region_names(),
                   'ShortName': GCP_region_shortnames(),
                   'Index': GCP_region_index(),
                   'AnthroFraction': GCP_region_AnthroFrac(), 
                   'Nregions': len(GCP_region_names()),
                   'NCvarname':'GCP_region',
                   'SaunoisTD':GCP_region_2003_2012_TDWL_Saunois(),
                   'SaunoisTDmodels':GCP_region_2003_2012_TDWL_Saunois_models(),
                   'SaunoisBU':GCP_region_2003_2012_BUWL_Saunois(),
                   'SaunoisBUmodels':GCP_region_2003_2012_BUWL_Saunois_models(),
                   }
    return dictionary

def REGION_DICTIONARIES():
    dictionary= { 
                 'IMAGE':IMAGE_region_dict(),
                 'TRANSCOM':TRANSCOM_region_dict(),
                 'GCP':GCP_region_dict(),
                 }
    return dictionary

def PMIP_model_data():
    dictionary = {
            'names': ['CLM4.5', 'CoLM', 'ISBA', 'LPJ-GUESS',  #'JULES',  
                      'MIROC-ESM', 'ORCHa', 'ORCHb', 'UVic', 'UW-VIC', 
                      'JSBACH', 'TEM6', 'SiBCASA', 'GIPLa', 'GIPlb' ],
            'extent': [1577.,  762., 2086., 1741.,            #1319.,  
                       1302., 2001., 1632., 1647., 1756., 
                       2039., 1413., 1732., 1160., 2108.],
            'lossrate': [2.277, .200, 3.852, 3.496,           #5.879, 
                         .534, 1.745, 1.525, 2.485, .064, 
                         3.857, 2.450, 1.817, .576, 2.240 ]
            }
    return dictionary
